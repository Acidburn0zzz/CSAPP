# Execution begins at address 0
	.pos 0
init:	irmovl Stack, %esp # Set up stack pointer
	irmovl Stack, %ebp # Set up base pointer
	call Main	   # Execute main program
	halt		   # Terminate program

# Source block
.align 4
src:
	.long 0x00a
	.long 0x0b0
	.long 0xc00
# Destination block
dest:
	.long 0x111
	.long 0x222
	.long 0x333

Main:	pushl %ebp
	rrmovl %esp, %ebp
	irmovl $3, %eax
	pushl %eax
	irmovl dest, %eax
	pushl %eax
	irmovl src, %eax
	pushl %eax
	call copy_block
	rrmovl %ebp, %esp
	popl %ebp
	ret

	# int copy_block(int *src, int *dest, int len)
copy_block:
	pushl %ebp
	rrmovl %esp, %ebp
	rrmovl %ebp, %esp
	mrmovl 8(%ebp), %ecx	 # ecx = src
	mrmovl 12(%ebp), %edx    # edx = dest
	mrmovl 16(%ebp), %ebx    # ebx = len
	xorl %eax, %eax		 # eax <- result = 0
	andl %ebx, %ebx
	jle End
Loop:	irmovl $4, %edi		 # edi = 4
	mrmovl (%ecx), %esi	 # val = *src
	addl %edi, %ecx		 # src++
	rmmovl %esi, (%edx)	 # *dest = val
	addl %edi, %edx		 # edx++
	xorl %esi, %eax		 # result ^= val
	irmovl $-1, %edi
	addl %edi, %ebx		 # len--
	jg Loop
End:	rrmovl %ebp, %esp
	popl %ebp
	ret

# The stack starts here and grows to lower addresses
	.pos 0x100
Stack:
