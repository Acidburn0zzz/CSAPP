# Execution begins at address 0
	.pos 0
init:	irmovl Stack, %esp # Set up stack pointer
	irmovl Stack, %ebp # Set up base pointer
	call Main	   # Execute main program
	halt		   # Terminate program

# Sample linked list
.align 4
ele1:
	.long 0x00a
	.long ele2
ele2:
	.long 0x0b0
	.long ele3
ele3:
	.long 0xc00
	.long 0

Main:	pushl %ebp
	rrmovl %esp, %ebp
	irmovl ele1, %eax
	pushl %eax
	call rsum_list
	rrmovl %ebp, %esp
	popl %ebp
	ret

	# int rsum_list(list_ptr ls)
rsum_list:
	pushl %ebp
	rrmovl %esp, %ebp
	rrmovl %ebp, %esp
	mrmovl 8(%ebp), %ecx # ecx = ls
	andl %ecx, %ecx
	je Basic
	mrmovl (%ecx), %edx  # edx = ls->val
	mrmovl 4(%ecx), %ecx # get ls->next
	pushl %ecx	     # push ls->next
	call rsum_list
	addl %edx, %$eax     # return val + rest
Basic:	xorl %eax, %eax      # return 0
End:	rrmovl %ebp, %esp
	popl %ebp
	ret

# The stack starts here and grows to lower addresses
	.pos 0x100
Stack:
